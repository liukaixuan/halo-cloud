#FAQ

对于每个服务的配置方法，请点开左侧导航的“服务使用指南”，每个服务都有详细的介绍。如果没有，请评论此页。

== 我觉得这个项目不是云，只有MapReduce，GAE之类的才叫云，你这不算！？ ==

 的确。使用云的名字为了非技术人员容易理解，技术人员能够明白意思，更恰当的定义应该为“基础服务”，或者SOA之类的。

 至于是不是云，要看个人理解。如果你觉得中国很多企业做出的“云输入法”，“360云杀毒”，“云CRM”算作云的话，那halo-cloud也算是云；如果你觉得只有GAE这类算云的话，halo-cloud就不是，并且全世界也没有几个真正的云，中国可能一个都没有。
 
 对于我而言，只要能理解意思即可，不想纠缠于名字。平心而论，我也不觉得这是云，呵呵。

 
== 这个项目没有hadoop，没有MapReduce，所以没有技术含量，能有什么用？我很不屑！ ==

 技术服务于业务。我觉得这种想法是饱汉子不知饿汉子饥。
 
 大公司自然可以组建专有的团队，不管用得到用不到，去研究大范围的分布式，能支持一万台机器的，绝对不考虑只能支持1000台机器的方案和技术。这个没有问题，但halo-cloud这个项目不是给你们用的。
 
 halo-cloud定位就是“普通编程方式的小规模云计算平台”，大公司有功夫去搞那些大的东西，不见得小公司小团队有。
 
 简单，实用，容易上手是我们的定位，我们的方案不期望使用者懂GFS，懂MapReduce，懂分布式；因为我们不指望使用者在天天加班写代码前，还要先研究明白google的论文！能减少开发工作量就行。
 
 而实际上，他们可能也就是需要几台机器的小集群系统，太复杂的技术也用不到。

 
== halo-cloud到底是什么？能做什么？ ==

 有位网友做过一个很形象的评价“很多小tools组成的suite”。

 在这个世界上，相信99.99%的项目相信都是一堆小功能/小模块组装成的，也就是“很多小tools组成的项目”。真正的改变世界的全新的项目没多少。 

 假设我们来了一个项目，要由20个小tools组成，其中包含8个其他项目开发过的tools，另外12个业务紧密相关的tools。halo-cloud就是想统一的提供那8个tools。

 在halo-cloud之前，你做这个项目需要开发20个tools，有了halo-cloud你只需要开发12个新tools，直接使用另外8个开发过的公共tools。具体那8个tools是不是分布式的，是不是云的，要看tools的特性来决定。这个tool可能就是一个类，返回一些东西，像我们拿姓名和身份证号去xx部验证真伪的tool；也可能是一个大的分布式tool，好比写入用户上传的视频文件到分布式存储中，自动压缩转码并分发到全球CDN网络（假设我们是每个节点都跑单独的分布式存储，不是全球连成1个大存储）。 

 halo-cloud做了什么哪？就是提供一个你着手开始建立自己公共tools的基础项目。我们做了一些tool，并将继续增加。当然在tools内部，如果需要分布式和机器同步，我们也会用zookeeper呀之类的，这个要看具体的tool的需要。现在，在内部，我们主要是用zk做各个机器间的版本控制和同步，当服务需要协同版本的时候。 

 对于解决远程调用性能问题，halo-cloud提供的接口是基于长连接的Socket的，并且允许自定义参数和返回结果解析。理论上，你在需要的时候，可以达到网络编程的极限速度，完全的自定义协议和长连接。我们曾经拿IP查询做过测试，只启动1个socket连接，同步调用，性能是phprpc（与hessian类似的rpc框架，官方提供的测试报告性能更高）的15-20倍。资源消耗方面，通过netstat命令，服务器端和客户端只有1个连接，而phprpc一下子能刷出一大堆的连接，甚至还遇到过文件数过多的问题。这应该是正常的，自定义协议并且稳定socket长连接的性能和资源消耗对比HTTP肯定是数量级的差别。 

 对于长连接，客户端是基于标准socket的连接池，服务器端基于Mina的NIO。 

 当然也提供有HTTP短连接的。常规RPC协议的调用，在guzz和spring中都有封装，这个项目就没有继续封装。 




